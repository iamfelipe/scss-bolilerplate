//
// Functions
//

/// Calculate em values.
/// @access private
/// @group addons
///
/// @param {Number} $pixels - Font size in pixels
/// @param {Number} $context [$base-font-size] - Calculate relative to this context.
///
/// @example scss
///     font-size: em(24px, 18px);
///     //  font-size: 1.333em;

@function em($pixels, $context: ms(0)) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return ($pixels / $context) * 1em;
}

/// Calculate rem values.
/// @access private
/// @group addons
///
/// @param {Number} $pixels - Font size in pixels
///
/// @example scss
///     font-size: rem(24px);
///     //  font-size: 1.5rem;

@function rem($pixels) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @return ($pixels / ms(0)) * 1rem;
}

/// Asset URL builder
/// @access private
/// @group addons
///
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
///
/// @return {URL} - A `url()` function leading to the asset
@function asset($type, $file) {
  @return url("#{$asset-base-path}/#{$type}/#{$file}");
}

/// Image asset helper
/// @access private
/// @group addons
///
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
///
/// @require {function} asset
@function image($file) {
  @return asset("img", $file);
}

/// Font asset helper
/// @access private
/// @group addons
///
/// @param {String} $file - Font file name, including extension
/// @return {URL} - A `url()` function leading to the font
///
/// @require {function} asset
@function font($file) {
  @return asset("fonts", $file);
}

// ---------------------------------------------------------
// get
// Search for any value contained within nested maps, by using
// dot notation as the key argument
//
// Required arguments:
// `$key` String
//
// Example of use:
// get('border.radius.xs')
//
// Dependencies:
// deep-map-check, deep-map-get, str-explode
//
// @return Anything
// ---------------------------------------------------------
@function get($key, $map: $custom-scale) {
  $keys: str-explode($key, ".");

  @if not deep-map-check($map, $keys...) {
    @error 'The argument $map: `#{$map}` doesn\'t has some of the $keys: `#{$keys}`!';
  }

  @return deep-map-get($map, $keys...);
}

// ---------------------------------------------------------
// str-explode
// Split a string by delimiter
//
// Required arguments:
// `$string` String
// `$delimiter` String *predefined*
//
// Example of use:
// str-explode('some-things-will-never-change', '-')
//
// @return List
// ---------------------------------------------------------
@function str-explode($string, $delimiter: "") {
  @if type-of($string) != "string" {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  } @else if type-of($delimiter) != "string" {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }

  $result: ();
  $running: true;

  @if str-length($delimiter) == 0 {
    @for $i from 1 through str-length($string) {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  @while $running {
    $index: str-index($string, $delimiter);

    @if $index != null {
      $item: str-slice($string, 1, ($index - 1));
      $result: append($result, $item);
      $string: str-slice($string, ($index + str-length($delimiter)));
    } @else {
      $running: false;
    }
  }

  @return append($result, $string);
}

// ---------------------------------------------------------
// deep-map-check
// Check if nested map has a value by the keys
//
// Required arguments:
// `$map` Map
// `$keys` String(s)
//
// Example of use:
// deep-map-check($nested-map, 'key-1', 'key-2')
//
// @return Bool
// ---------------------------------------------------------
@function deep-map-check($map, $keys...) {
  @if type-of($map) != "map" {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }

    $map: map-get($map, $key);
  }

  @return true;
}

// ---------------------------------------------------------
// deep-map-get
// Get a value from nested map by the keys
//
// Required arguments:
// `$map` Map
// `$keys` String(s)
//
// Example of use:
// deep-map-get($dfr-spacing, 'xs', 'y')
//
// @return Unspecified (it may return anything as a result)
// ---------------------------------------------------------
@function deep-map-get($map, $keys...) {
  @if type-of($map) != "map" {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}
